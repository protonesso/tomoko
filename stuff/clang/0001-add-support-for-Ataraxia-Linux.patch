From fec94a19177f68d9e60e819aeb22771af5692554 Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Sat, 2 Jan 2021 06:09:49 +0900
Subject: [PATCH 1/3] add support for Ataraxia Linux

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 include/clang/Driver/Distro.h       |  5 +++++
 lib/Driver/Distro.cpp               |  3 +++
 lib/Driver/ToolChains/Linux.cpp     | 13 ++++++++-----
 lib/Driver/ToolChains/Linux.h       |  1 +
 lib/Frontend/CompilerInvocation.cpp |  8 ++++++++
 5 files changed, 25 insertions(+), 5 deletions(-)

diff --git a/include/clang/Driver/Distro.h b/include/clang/Driver/Distro.h
index 038d4ce7..2f45e9d2 100644
--- a/include/clang/Driver/Distro.h
+++ b/include/clang/Driver/Distro.h
@@ -28,6 +28,7 @@ public:
     // the first and last known member in the family, e.g. IsRedHat().
     AlpineLinux,
     ArchLinux,
+    AtaraxiaLinux,
     DebianLenny,
     DebianSqueeze,
     DebianWheezy,
@@ -132,6 +133,10 @@ public:
     return DistroVal == Gentoo;
   }
 
+  bool IsAtaraxiaLinux() const {
+    return DistroVal == AtaraxiaLinux;
+  }
+
   /// @}
 };
 
diff --git a/lib/Driver/Distro.cpp b/lib/Driver/Distro.cpp
index 4d58ad1a..2e1ed09f 100644
--- a/lib/Driver/Distro.cpp
+++ b/lib/Driver/Distro.cpp
@@ -165,6 +165,9 @@ static Distro::DistroType DetectDistro(llvm::vfs::FileSystem &VFS,
   if (VFS.exists("/etc/gentoo-release"))
     return Distro::Gentoo;
 
+  if (VFS.exists("/etc/ataraxia-release"))
+    return Distro::AtaraxiaLinux;
+
   return Distro::UnknownDistro;
 }
 
diff --git a/lib/Driver/ToolChains/Linux.cpp b/lib/Driver/ToolChains/Linux.cpp
index 18035047..5353e3a8 100644
--- a/lib/Driver/ToolChains/Linux.cpp
+++ b/lib/Driver/ToolChains/Linux.cpp
@@ -221,13 +221,13 @@ Linux::Linux(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
 
   Distro Distro(D.getVFS(), Triple);
 
-  if (Distro.IsAlpineLinux() || Triple.isAndroid()) {
+  if (Distro.IsAlpineLinux() || Distro.IsAtaraxiaLinux() || Triple.isAndroid()) {
     ExtraOpts.push_back("-z");
     ExtraOpts.push_back("now");
   }
 
   if (Distro.IsOpenSUSE() || Distro.IsUbuntu() || Distro.IsAlpineLinux() ||
-      Triple.isAndroid()) {
+      Distro.IsAtaraxiaLinux() || Triple.isAndroid()) {
     ExtraOpts.push_back("-z");
     ExtraOpts.push_back("relro");
   }
@@ -266,7 +266,7 @@ Linux::Linux(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
   // Android loader does not support .gnu.hash until API 23.
   // Hexagon linker/loader does not support .gnu.hash
   if (!IsMips && !IsHexagon) {
-    if (Distro.IsRedhat() || Distro.IsOpenSUSE() || Distro.IsAlpineLinux() ||
+    if (Distro.IsRedhat() || Distro.IsOpenSUSE() || Distro.IsAtaraxiaLinux() || Distro.IsAlpineLinux() ||
         (Distro.IsUbuntu() && Distro >= Distro::UbuntuMaverick) ||
         (IsAndroid && !Triple.isAndroidVersionLT(23)))
       ExtraOpts.push_back("--hash-style=gnu");
@@ -819,8 +819,11 @@ void Linux::AddIAMCUIncludeArgs(const ArgList &DriverArgs,
 }
 
 bool Linux::isPIEDefault() const {
-  return (getTriple().isAndroid() && !getTriple().isAndroidVersionLT(16)) ||
-          getTriple().isMusl() || getSanitizerArgs().requiresPIE();
+  return true;
+}
+
+unsigned Linux::GetDefaultStackProtectorLevel(bool KernelOrKext) const {
+  return 2;
 }
 
 bool Linux::isNoExecStackDefault() const {
diff --git a/lib/Driver/ToolChains/Linux.h b/lib/Driver/ToolChains/Linux.h
index 6b16b0e6..a627828b 100644
--- a/lib/Driver/ToolChains/Linux.h
+++ b/lib/Driver/ToolChains/Linux.h
@@ -37,6 +37,7 @@ public:
                            llvm::opt::ArgStringList &CC1Args) const override;
   CXXStdlibType GetDefaultCXXStdlibType() const override;
   bool isPIEDefault() const override;
+  unsigned GetDefaultStackProtectorLevel(bool KernelOrKext) const override;
   bool isNoExecStackDefault() const override;
   bool IsMathErrnoDefault() const override;
   SanitizerMask getSupportedSanitizers() const override;
diff --git a/lib/Frontend/CompilerInvocation.cpp b/lib/Frontend/CompilerInvocation.cpp
index 73114c6d..7607e974 100644
--- a/lib/Frontend/CompilerInvocation.cpp
+++ b/lib/Frontend/CompilerInvocation.cpp
@@ -3808,6 +3808,14 @@ bool CompilerInvocation::CreateFromArgs(CompilerInvocation &Res,
   ParsePreprocessorOutputArgs(Res.getPreprocessorOutputOpts(), Args,
                               Res.getFrontendOpts().ProgramAction);
 
+  // Set the macro before the command line macros are being processed, so it can be
+  // properly unset if required to in case of incompatibilities.
+  if (Res.getCodeGenOpts().OptimizationLevel > 0 &&
+      (DashX.getLanguage() == Language::C || DashX.getLanguage() == Language::CXX) &&
+      !LangOpts.Sanitize.has(SanitizerKind::Address)) {
+    Res.getPreprocessorOpts().addMacroDef("_FORTIFY_SOURCE=2");
+  }
+
   // Turn on -Wspir-compat for SPIR target.
   if (T.isSPIR())
     Res.getDiagnosticOpts().Warnings.push_back("spir-compat");
-- 
2.29.2

