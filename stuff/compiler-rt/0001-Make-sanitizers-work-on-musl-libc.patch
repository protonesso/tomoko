From 25c7b02bb859ccb8f7de0aa0d69f666571f44c6a Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Fri, 15 Jan 2021 20:15:33 +0900
Subject: [PATCH 1/3] Make sanitizers work on musl libc

Special thanks to Exherbo (https://git.exherbo.org/arbor.git/tree/packages/dev-libs/compiler-rt)
and ngtc (https://github.com/tpimh/ngtc/tree/version-11.0.0/root/patch)

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 lib/asan/asan_linux.cpp                       |  4 +-
 lib/hwasan/hwasan_exceptions.cpp              |  4 ++
 lib/interception/interception_linux.cpp       |  4 +-
 lib/interception/interception_type_test.cpp   |  2 +-
 lib/sanitizer_common/sanitizer_linux.cpp      |  7 ++
 .../sanitizer_platform_limits_posix.cpp       | 72 +++++++++++++++----
 .../sanitizer_platform_limits_posix.h         | 23 ++++--
 7 files changed, 93 insertions(+), 23 deletions(-)

diff --git a/lib/asan/asan_linux.cpp b/lib/asan/asan_linux.cpp
index ce5e873..177ec0e 100644
--- a/lib/asan/asan_linux.cpp
+++ b/lib/asan/asan_linux.cpp
@@ -45,7 +45,7 @@
 #include <link.h>
 #endif
 
-#if SANITIZER_ANDROID || SANITIZER_FREEBSD || SANITIZER_SOLARIS
+#if SANITIZER_ANDROID || SANITIZER_FREEBSD || SANITIZER_SOLARIS || (SANITIZER_LINUX && !defined(__GLIBC__))
 #include <ucontext.h>
 extern "C" void* _DYNAMIC;
 #elif SANITIZER_NETBSD
@@ -138,7 +138,7 @@ void AsanApplyToGlobals(globals_op_fptr op, const void *needle) {
   UNIMPLEMENTED();
 }
 
-#if SANITIZER_ANDROID
+#if SANITIZER_ANDROID || (SANITIZER_LINUX && !defined(__GLIBC__))
 // FIXME: should we do anything for Android?
 void AsanCheckDynamicRTPrereqs() {}
 void AsanCheckIncompatibleRT() {}
diff --git a/lib/hwasan/hwasan_exceptions.cpp b/lib/hwasan/hwasan_exceptions.cpp
index 169e787..da96e36 100644
--- a/lib/hwasan/hwasan_exceptions.cpp
+++ b/lib/hwasan/hwasan_exceptions.cpp
@@ -16,6 +16,10 @@
 
 #include <unwind.h>
 
+#ifndef _Unwind_Word
+# define _Unwind_Word uintptr_t
+#endif
+
 using namespace __hwasan;
 using namespace __sanitizer;
 
diff --git a/lib/interception/interception_linux.cpp b/lib/interception/interception_linux.cpp
index 950cd51..f4942e2 100644
--- a/lib/interception/interception_linux.cpp
+++ b/lib/interception/interception_linux.cpp
@@ -63,8 +63,8 @@ bool InterceptFunction(const char *name, uptr *ptr_to_real, uptr func,
   return addr && (func == wrapper);
 }
 
-// Android and Solaris do not have dlvsym
-#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD
+// Android and Solaris and musl-libc do not have dlvsym
+#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD && (!SANITIZER_LINUX || defined(__GLIBC__))
 static void *GetFuncAddr(const char *name, const char *ver) {
   return dlvsym(RTLD_NEXT, name, ver);
 }
diff --git a/lib/interception/interception_type_test.cpp b/lib/interception/interception_type_test.cpp
index a611604..18e28d7 100644
--- a/lib/interception/interception_type_test.cpp
+++ b/lib/interception/interception_type_test.cpp
@@ -13,7 +13,7 @@
 
 #include "interception.h"
 
-#if SANITIZER_LINUX || SANITIZER_MAC
+#if SANITIZER_LINUX && defined __GLIBC__ || SANITIZER_MAC
 
 #include <sys/types.h>
 #include <stddef.h>
diff --git a/lib/sanitizer_common/sanitizer_linux.cpp b/lib/sanitizer_common/sanitizer_linux.cpp
index 470f4b7..cd729ab 100644
--- a/lib/sanitizer_common/sanitizer_linux.cpp
+++ b/lib/sanitizer_common/sanitizer_linux.cpp
@@ -74,6 +74,11 @@
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
 #include <sys/personality.h>
+#if !defined(__GLIBC__)
+# if !defined(__NR_clock_gettime)
+#  define __NR_clock_gettime __NR_clock_gettime64
+# endif
+#endif
 #endif
 
 #if SANITIZER_FREEBSD
@@ -500,7 +505,9 @@ u64 NanoTime() {
   kernel_timeval tv;
 #endif
   internal_memset(&tv, 0, sizeof(tv));
+#if defined(__GLIBC__)
   internal_syscall(SYSCALL(gettimeofday), &tv, 0);
+#endif
   return (u64)tv.tv_sec * 1000*1000*1000 + tv.tv_usec * 1000;
 }
 
diff --git a/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp b/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp
index c052aa2..5108835 100644
--- a/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp
+++ b/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp
@@ -26,6 +26,7 @@
 // Must go after undef _FILE_OFFSET_BITS.
 #include "sanitizer_glibc_version.h"
 
+#include <stdio.h> /* BUFSIZ on musl */
 #include <arpa/inet.h>
 #include <dirent.h>
 #include <grp.h>
@@ -58,7 +59,9 @@
 #endif
 
 #if !SANITIZER_ANDROID
-#include <fstab.h>
+# if defined(__GLIBC__)
+# include <fstab.h>
+# endif
 #include <sys/mount.h>
 #include <sys/timeb.h>
 #include <utmpx.h>
@@ -68,7 +71,9 @@
 #include <malloc.h>
 #include <mntent.h>
 #include <netinet/ether.h>
-#include <sys/sysinfo.h>
+#if defined(__GLIBC__)
+# include <sys/sysinfo.h>
+#endif
 #include <sys/vt.h>
 #include <linux/cdrom.h>
 #include <linux/fd.h>
@@ -111,12 +116,21 @@ typedef struct user_fpregs elf_fpregset_t;
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
 #include <glob.h>
-#include <obstack.h>
+#if defined (__GLIBC__)
+# include <obstack.h>
+#endif
 #include <mqueue.h>
-#include <net/if_ppp.h>
-#include <netax25/ax25.h>
-#include <netipx/ipx.h>
-#include <netrom/netrom.h>
+# if __GLIBC_PREREQ(2, 14)
+#  include <net/if_ppp.h>
+#  include <netax25/ax25.h>
+#  include <netipx/ipx.h>
+#  include <netrom/netrom.h>
+# else
+#  include <linux/if_ppp.h>
+#  include <linux/ax25.h>
+#  include <linux/ipx.h>
+#  include <linux/netrom.h>
+# endif
 #if HAVE_RPC_XDR_H
 # include <rpc/xdr.h>
 #endif
@@ -202,7 +216,11 @@ namespace __sanitizer {
 #endif // (SANITIZER_MAC && !TARGET_CPU_ARM64) && !SANITIZER_IOS
 
 #if !SANITIZER_ANDROID
+# if defined(__GLIBC__)
   unsigned struct_fstab_sz = sizeof(struct fstab);
+# else
+  unsigned struct_fstab_sz = 0;
+# endif
   unsigned struct_statfs_sz = sizeof(struct statfs);
   unsigned struct_sockaddr_sz = sizeof(struct sockaddr);
   unsigned ucontext_t_sz = sizeof(ucontext_t);
@@ -298,7 +316,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(ElfW(Phdr));
 unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && defined(__GLIBC__)
   int glob_nomatch = GLOB_NOMATCH;
   int glob_altdirfunc = GLOB_ALTDIRFUNC;
 #endif
@@ -417,7 +435,11 @@ unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
   unsigned struct_input_id_sz = sizeof(struct input_id);
   unsigned struct_mtpos_sz = sizeof(struct mtpos);
   unsigned struct_rtentry_sz = sizeof(struct rtentry);
+# if defined(__GLIBC__)
   unsigned struct_termio_sz = sizeof(struct termio);
+# else
+  unsigned struct_termio_sz = 0;
+# endif
   unsigned struct_vt_consize_sz = sizeof(struct vt_consize);
   unsigned struct_vt_sizes_sz = sizeof(struct vt_sizes);
   unsigned struct_vt_stat_sz = sizeof(struct vt_stat);
@@ -443,7 +465,11 @@ unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
 #endif // SANITIZER_LINUX
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
+# if __GLIBC_PREREQ(2, 14)
   unsigned struct_ax25_parms_struct_sz = sizeof(struct ax25_parms_struct);
+# else
+  unsigned struct_ax25_parms_struct_sz = 0;
+# endif
   unsigned struct_cyclades_monitor_sz = sizeof(struct cyclades_monitor);
 #if EV_VERSION > (0x010000)
   unsigned struct_input_keymap_entry_sz = sizeof(struct input_keymap_entry);
@@ -456,7 +482,11 @@ unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
   unsigned struct_kbkeycode_sz = sizeof(struct kbkeycode);
   unsigned struct_kbsentry_sz = sizeof(struct kbsentry);
   unsigned struct_mtconfiginfo_sz = sizeof(struct mtconfiginfo);
+# if __GLIBC_PREREQ(2, 14)
   unsigned struct_nr_parms_struct_sz = sizeof(struct nr_parms_struct);
+# else
+  unsigned struct_nr_parms_struct_sz = 0;
+# endif
   unsigned struct_scc_modem_sz = sizeof(struct scc_modem);
   unsigned struct_scc_stat_sz = sizeof(struct scc_stat);
   unsigned struct_serial_multiport_struct_sz
@@ -884,16 +914,22 @@ unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
   unsigned IOCTL_SIOCAIPXPRISLT = SIOCAIPXPRISLT;
   unsigned IOCTL_SIOCAX25ADDUID = SIOCAX25ADDUID;
   unsigned IOCTL_SIOCAX25DELUID = SIOCAX25DELUID;
+# if __GLIBC_PREREQ(2, 14)
   unsigned IOCTL_SIOCAX25GETPARMS = SIOCAX25GETPARMS;
+# endif
   unsigned IOCTL_SIOCAX25GETUID = SIOCAX25GETUID;
   unsigned IOCTL_SIOCAX25NOUID = SIOCAX25NOUID;
+# if __GLIBC_PREREQ(2, 14)
   unsigned IOCTL_SIOCAX25SETPARMS = SIOCAX25SETPARMS;
+# endif
   unsigned IOCTL_SIOCDEVPLIP = SIOCDEVPLIP;
   unsigned IOCTL_SIOCIPXCFGDATA = SIOCIPXCFGDATA;
   unsigned IOCTL_SIOCNRDECOBS = SIOCNRDECOBS;
+# if __GLIBC_PREREQ(2, 14)
   unsigned IOCTL_SIOCNRGETPARMS = SIOCNRGETPARMS;
   unsigned IOCTL_SIOCNRRTCTL = SIOCNRRTCTL;
   unsigned IOCTL_SIOCNRSETPARMS = SIOCNRSETPARMS;
+# endif
   unsigned IOCTL_TIOCGSERIAL = TIOCGSERIAL;
   unsigned IOCTL_TIOCSERGETMULTI = TIOCSERGETMULTI;
   unsigned IOCTL_TIOCSERSETMULTI = TIOCSERSETMULTI;
@@ -964,7 +1000,7 @@ CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_phdr);
 CHECK_SIZE_AND_OFFSET(dl_phdr_info, dlpi_phnum);
 #endif // SANITIZER_LINUX || SANITIZER_FREEBSD
 
-#if (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
+#if ((SANITIZER_LINUX && defined(__GLIBC__)) || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
 CHECK_TYPE_SIZE(glob_t);
 CHECK_SIZE_AND_OFFSET(glob_t, gl_pathc);
 CHECK_SIZE_AND_OFFSET(glob_t, gl_pathv);
@@ -998,6 +1034,7 @@ CHECK_TYPE_SIZE(iovec);
 CHECK_SIZE_AND_OFFSET(iovec, iov_base);
 CHECK_SIZE_AND_OFFSET(iovec, iov_len);
 
+#if SANITIZER_LINUX && __GLIBC_PREREQ(2, 14)
 CHECK_TYPE_SIZE(msghdr);
 CHECK_SIZE_AND_OFFSET(msghdr, msg_name);
 CHECK_SIZE_AND_OFFSET(msghdr, msg_namelen);
@@ -1011,6 +1048,7 @@ CHECK_TYPE_SIZE(cmsghdr);
 CHECK_SIZE_AND_OFFSET(cmsghdr, cmsg_len);
 CHECK_SIZE_AND_OFFSET(cmsghdr, cmsg_level);
 CHECK_SIZE_AND_OFFSET(cmsghdr, cmsg_type);
+#endif
 
 #if SANITIZER_LINUX && (__ANDROID_API__ >= 21 || __GLIBC_PREREQ (2, 14))
 CHECK_TYPE_SIZE(mmsghdr);
@@ -1019,15 +1057,21 @@ CHECK_SIZE_AND_OFFSET(mmsghdr, msg_len);
 #endif
 
 COMPILER_CHECK(sizeof(__sanitizer_dirent) <= sizeof(dirent));
+#if __GLIBC_PREREQ (2, 14)
 CHECK_SIZE_AND_OFFSET(dirent, d_ino);
+#endif
 #if SANITIZER_MAC
 CHECK_SIZE_AND_OFFSET(dirent, d_seekoff);
 #elif SANITIZER_FREEBSD
 // There is no 'd_off' field on FreeBSD.
 #else
+#if __GLIBC_PREREQ (2, 14)
 CHECK_SIZE_AND_OFFSET(dirent, d_off);
 #endif
+#endif
+#if __GLIBC_PREREQ (2, 14)
 CHECK_SIZE_AND_OFFSET(dirent, d_reclen);
+#endif
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
 COMPILER_CHECK(sizeof(__sanitizer_dirent64) <= sizeof(dirent64));
@@ -1116,7 +1160,7 @@ CHECK_SIZE_AND_OFFSET(mntent, mnt_passno);
 
 CHECK_TYPE_SIZE(ether_addr);
 
-#if (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
+#if ((SANITIZER_LINUX && __GLIBC_PREREQ(2, 14)) || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
 CHECK_TYPE_SIZE(ipc_perm);
 # if SANITIZER_FREEBSD
 CHECK_SIZE_AND_OFFSET(ipc_perm, key);
@@ -1178,11 +1222,11 @@ CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_dstaddr);
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_data);
 #endif
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX && __GLIBC_PREREQ(2, 14)
 COMPILER_CHECK(sizeof(__sanitizer_struct_mallinfo) == sizeof(struct mallinfo));
 #endif
 
-#if !SANITIZER_ANDROID
+#if !SANITIZER_ANDROID && __GLIBC_PREREQ (2, 14)
 CHECK_TYPE_SIZE(timeb);
 CHECK_SIZE_AND_OFFSET(timeb, time);
 CHECK_SIZE_AND_OFFSET(timeb, millitm);
@@ -1228,7 +1272,7 @@ COMPILER_CHECK(__sanitizer_XDR_DECODE == XDR_DECODE);
 COMPILER_CHECK(__sanitizer_XDR_FREE == XDR_FREE);
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && __GLIBC_PREREQ(2, 14)
 COMPILER_CHECK(sizeof(__sanitizer_FILE) <= sizeof(FILE));
 CHECK_SIZE_AND_OFFSET(FILE, _flags);
 CHECK_SIZE_AND_OFFSET(FILE, _IO_read_ptr);
@@ -1247,7 +1291,7 @@ CHECK_SIZE_AND_OFFSET(FILE, _chain);
 CHECK_SIZE_AND_OFFSET(FILE, _fileno);
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && __GLIBC_PREREQ (2, 14) && !SANITIZER_ANDROID
 COMPILER_CHECK(sizeof(__sanitizer__obstack_chunk) <= sizeof(_obstack_chunk));
 CHECK_SIZE_AND_OFFSET(_obstack_chunk, limit);
 CHECK_SIZE_AND_OFFSET(_obstack_chunk, prev);
diff --git a/lib/sanitizer_common/sanitizer_platform_limits_posix.h b/lib/sanitizer_common/sanitizer_platform_limits_posix.h
index 658b0ab..9310739 100644
--- a/lib/sanitizer_common/sanitizer_platform_limits_posix.h
+++ b/lib/sanitizer_common/sanitizer_platform_limits_posix.h
@@ -24,6 +24,11 @@
 #include "sanitizer_glibc_version.h"
 #endif
 
+# ifndef __GLIBC_PREREQ
+/* Avoid, error: function-like macro '__GLIBC_PREREQ' not defined. */
+#  define __GLIBC_PREREQ(...) (0)
+# endif
+
 # define GET_LINK_MAP_BY_DLOPEN_HANDLE(handle) ((link_map*)(handle))
 
 namespace __sanitizer {
@@ -54,7 +59,9 @@ extern unsigned struct_regex_sz;
 extern unsigned struct_regmatch_sz;
 
 #if !SANITIZER_ANDROID
+# if defined(__GLIBC__)
 extern unsigned struct_fstab_sz;
+# endif
 extern unsigned struct_statfs_sz;
 extern unsigned struct_sockaddr_sz;
 extern unsigned ucontext_t_sz;
@@ -761,12 +768,10 @@ struct __sanitizer_glob_t {
   int (*gl_lstat)(const char *, void *);
   int (*gl_stat)(const char *, void *);
 };
-# endif  // SANITIZER_LINUX
 
-# if SANITIZER_LINUX
 extern int glob_nomatch;
 extern int glob_altdirfunc;
-# endif
+# endif  // SANITIZER_LINUX
 #endif  // !SANITIZER_ANDROID
 
 extern unsigned path_max;
@@ -777,7 +782,7 @@ struct __sanitizer_wordexp_t {
   uptr we_offs;
 };
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && __GLIBC_PREREQ(2, 14)
 struct __sanitizer_FILE {
   int _flags;
   char *_IO_read_ptr;
@@ -980,7 +985,9 @@ extern unsigned struct_vt_mode_sz;
 #endif // SANITIZER_LINUX
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
+# if __GLIBC_PREREQ(2, 14)
 extern unsigned struct_ax25_parms_struct_sz;
+# endif
 extern unsigned struct_cyclades_monitor_sz;
 extern unsigned struct_input_keymap_entry_sz;
 extern unsigned struct_ipx_config_data_sz;
@@ -989,7 +996,9 @@ extern unsigned struct_kbentry_sz;
 extern unsigned struct_kbkeycode_sz;
 extern unsigned struct_kbsentry_sz;
 extern unsigned struct_mtconfiginfo_sz;
+# if __GLIBC_PREREQ(2, 14)
 extern unsigned struct_nr_parms_struct_sz;
+# endif
 extern unsigned struct_scc_modem_sz;
 extern unsigned struct_scc_stat_sz;
 extern unsigned struct_serial_multiport_struct_sz;
@@ -1394,16 +1403,22 @@ extern unsigned IOCTL_SIOCAIPXITFCRT;
 extern unsigned IOCTL_SIOCAIPXPRISLT;
 extern unsigned IOCTL_SIOCAX25ADDUID;
 extern unsigned IOCTL_SIOCAX25DELUID;
+# if __GLIBC_PREREQ(2, 14)
 extern unsigned IOCTL_SIOCAX25GETPARMS;
+# endif
 extern unsigned IOCTL_SIOCAX25GETUID;
 extern unsigned IOCTL_SIOCAX25NOUID;
+# if __GLIBC_PREREQ(2, 14)
 extern unsigned IOCTL_SIOCAX25SETPARMS;
+# endif
 extern unsigned IOCTL_SIOCDEVPLIP;
 extern unsigned IOCTL_SIOCIPXCFGDATA;
 extern unsigned IOCTL_SIOCNRDECOBS;
+# if __GLIBC_PREREQ(2, 14)
 extern unsigned IOCTL_SIOCNRGETPARMS;
 extern unsigned IOCTL_SIOCNRRTCTL;
 extern unsigned IOCTL_SIOCNRSETPARMS;
+# endif
 extern unsigned IOCTL_SNDCTL_DSP_GETISPACE;
 extern unsigned IOCTL_SNDCTL_DSP_GETOSPACE;
 extern unsigned IOCTL_TIOCGSERIAL;
-- 
2.29.2

